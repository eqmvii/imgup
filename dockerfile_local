# Testing Commands

# Build it:

# docker build -t imgup_local_v1 -f dockerfile_local .

# Do a quick test via just a bash prompt:

# docker run --rm -it imgup_local_v1 /bin/bash

# Elixir bootstrapping notes:

###########################
# First run Bootstrapping #
###########################

# No need for Elixir (or any software) on the local machine.
# We can get the files we need using a bind mount on a first run, bashing into the container, and installing phoenix.
# Subsequent runs use the volume specified in docker-compose.yml to accomplish the same thing

# Build the image:
#
# docker build --tag [TAGNAME] .

# Run the container, bind mounting to PWD, executing bash for persistance instead of the default mix phx.server
#
# docker run -d -it --mount type=bind,source="$(pwd)",target=/app [TAGNAME] bash

# Bash into your container:
#
# docker exec -it [CONTAINERID] bash

# Install Phoenix to generate your starter files
#
# mix archive.install hex phx_new

# Generate your new phoenix app (may need to move directories around to avoid an extra folder. 
# It's key that the lib, assets, etc. folders live in the project's ROOT director once all is said and done)
#
# cd /app && mix phx.new --no-ecto $APP_NAME

# install dependencies and build weback
# cd assets && npm install && node node_modules/webpack/bin/webpack.js --mode development

# run it with ports mapped, something like:
# docker run -d -it -p 8000:4000 --mount type=bind,source="$(pwd)",target=/app $APP_NAME

# TODO specify? 
FROM elixir:latest

RUN mix local.hex --force && \
    mix local.rebar --force

RUN mkdir /app
WORKDIR /app

# inotify-tools is used for live reload while developing
RUN apt-get update && \
    apt-get install -y inotify-tools 
    # && \
    # TODO: figure out best way to do this
    # curl -sL https://deb.nodesource.com/setup_13.x | bash - && \
    # apt-get install -y nodejs


EXPOSE 4000

# This will run be default, and won't work until the app has phoenix installed
CMD [ "mix", "phx.server" ]

# docker-compose binds exposed port 4000 to localhost 8000 so visit at:
# http://localhost:8000/
